import org.doomedsociety.gradlecpp.cfg.ToolchainConfigUtils
import org.doomedsociety.gradlecpp.msvc.MsvcToolchainConfig
import org.doomedsociety.gradlecpp.toolchain.icc.Icc
import org.doomedsociety.gradlecpp.toolchain.icc.IccCompilerPlugin
import org.doomedsociety.gradlecpp.gcc.GccToolchainConfig
import org.doomedsociety.gradlecpp.GradleCppUtils
import org.gradle.nativeplatform.NativeBinarySpec
import org.gradle.nativeplatform.NativeLibrarySpec
import org.gradle.nativeplatform.toolchain.VisualCpp

apply plugin: 'cpp'
apply plugin: IccCompilerPlugin
apply plugin: GccCompilerPlugin

void setupToolchain(NativeBinarySpec b) {
	boolean useGcc = project.hasProperty("useGcc")
	def cfg = rootProject.createToolchainConfig(b);
	cfg.projectInclude(project, '/../..', '/src', '/../../common', '/../../public', '/../../public/rehlds');
	cfg.singleDefines 'USE_BREAKPAD_HANDLER'

	if (cfg instanceof MsvcToolchainConfig) {
		cfg.compilerOptions.pchConfig = new MsvcToolchainConfig.PrecompiledHeadersConfig(
			enabled: true,
			pchHeader: 'precompiled.h',
			pchSourceSet: 'filesystem_pch'
		);

		cfg.singleDefines('_CRT_SECURE_NO_WARNINGS')
		cfg.compilerOptions.args '/Ob2', '/Oi', '/GF'
	}
	else if (cfg instanceof GccToolchainConfig) {
		if (!useGcc) {
			cfg.compilerOptions.pchConfig = new GccToolchainConfig.PrecompilerHeaderOptions(
				enabled: true,
				pchSourceSet: 'filesystem_pch'
			);
		}

		cfg.compilerOptions.languageStandard = 'c++11'
		cfg.defines([
			'_strdup': 'strdup',
			'_stricmp': 'strcasecmp',
			'_strnicmp': 'strncasecmp',
			'_vsnprintf': 'vsnprintf',
			'_snprintf': 'snprintf',
			'_unlink': 'unlink',
		]);

		if (useGcc) {
			// Produce code optimized for the most common IA32/AMD64/EM64T processors.
			// As new processors are deployed in the marketplace, the behavior of this option will change.
			cfg.compilerOptions.args '-mtune=generic', '-Wno-write-strings', '-msse3', '-flto'
		} else {
			cfg.compilerOptions.args '-Qoption,cpp,--treat_func_as_string_literal_cpp'
		}

		cfg.compilerOptions.args '-fno-exceptions'
		cfg.compilerOptions.interProceduralOptimizations = false;
		cfg.linkerOptions.interProceduralOptimizations = false;

		def funcToWrap = [
			"freopen", "fopen",  "fopen64", "open",    "open64",  "creat",    "access",
			"stat",    "lstat",  "scandir", "opendir", "__xstat", "__lxstat", "__xstat64", "__lxstat64",
			"chmod",   "chown",  "lchown",  "symlink", "link",    "mknod",    "mount",     "unlink",
			"mkfifo",  "rename", "utime",   "utimes",  "mkdir",   "rmdir"
		];

		funcToWrap.each {
			cfg.linkerOptions.args "-Wl,-wrap," + it
		}
	}

	ToolchainConfigUtils.apply(project, cfg, b);
}

model {
	buildTypes {
		release
	}

	platforms {
		x86 {
			architecture "x86"
		}
	}

	toolChains {
		visualCpp(VisualCpp) {
		}
		if (project.hasProperty("useGcc")) {
			gcc(Gcc)
		} else {
			icc(Icc)
		}
	}

	components {
		filesystem(NativeLibrarySpec) {
			targetPlatform 'x86'
			baseName 'filesystem_stdio'

			sources {
				filesystem_main(CppSourceSet) {
					source {
						srcDir "src"
						include "**/*.cpp"
						exclude "precompiled.cpp"
					}
				}

				filesystem_pch(CppSourceSet) {
					source {
						srcDir "src"
						include "precompiled.cpp"
					}
				}
			}

			binaries.all {
				NativeBinarySpec b -> project.setupToolchain(b)
			}
		}
	}
}

task buildFinalize << {
	if (GradleCppUtils.windows) {
		return;
	}

	binaries.withType(SharedLibraryBinarySpec) {
		def sharedBinary = it.getSharedLibraryFile();
		if (sharedBinary.exists()) {
			sharedBinary.renameTo(new File(sharedBinary.getParent() + "/" + sharedBinary.getName().replaceFirst("^lib", "")));
		}
	}
}

task buildFixes {
	dependsOn binaries.withType(SharedLibraryBinarySpec).matching { SharedLibraryBinarySpec blib ->
		blib.buildable && blib.buildType.name == 'release'
	}
}

task buildRelease {
	dependsOn binaries.withType(SharedLibraryBinarySpec).matching { SharedLibraryBinarySpec blib ->
		blib.buildable && blib.buildType.name == 'release'
	}
}

build.finalizedBy(buildFinalize);
buildFixes.finalizedBy(buildFinalize);
buildRelease.finalizedBy(buildFinalize);

// prevent static lib building
binaries.withType(StaticLibraryBinarySpec) { binary ->
	buildable = false
}
