import org.doomedsociety.gradlecpp.cfg.ToolchainConfigUtils
import org.doomedsociety.gradlecpp.msvc.MsvcToolchainConfig
import org.doomedsociety.gradlecpp.gcc.GccToolchainConfig
import org.doomedsociety.gradlecpp.toolchain.icc.Icc
import org.doomedsociety.gradlecpp.toolchain.icc.IccCompilerPlugin
import org.doomedsociety.gradlecpp.GradleCppUtils
import org.gradle.nativeplatform.NativeExecutableSpec
import org.gradle.nativeplatform.NativeExecutableBinarySpec

apply plugin: 'cpp'
apply plugin: 'windows-resources'
apply plugin: IccCompilerPlugin

List<Task> getRcCompileTasks(NativeBinarySpec binary)
{
	def linkTask = GradleCppUtils.getLinkTask(binary)
	def res = linkTask.taskDependencies.getDependencies(linkTask).findAll { Task t -> t instanceof WindowsResourceCompile }
	return res as List
}

void setupToolchain(NativeBinarySpec b) {
	def cfg = rootProject.createToolchainConfig(b);
	cfg.projectInclude(project, '/src', '/../engine', '/../common', '/../public', '/../public/rehlds');

	cfg.singleDefines 'USE_BREAKPAD_HANDLER', 'DEDICATED', 'LAUNCHER_FIXES', '_CONSOLE'

	if (cfg instanceof MsvcToolchainConfig) {
		cfg.compilerOptions.pchConfig = new MsvcToolchainConfig.PrecompiledHeadersConfig(
			enabled: true,
			pchHeader: 'precompiled.h',
			pchSourceSet: 'dedicated_pch'
		);

		cfg.singleDefines('_CRT_SECURE_NO_WARNINGS');
		cfg.compilerOptions.args '/Ob2', '/Oi', '/GF', '/GR-';
		cfg.extraLibs "ws2_32.lib", "winmm.lib", "user32.lib", "advapi32.lib", "shell32.lib"
	}
	else if (cfg instanceof GccToolchainConfig) {
		cfg.compilerOptions.pchConfig = new GccToolchainConfig.PrecompilerHeaderOptions(
			enabled: true,
			pchSourceSet: 'dedicated_pch'
		);

		cfg.compilerOptions.languageStandard = 'c++0x'
		cfg.defines([
			'_strdup': 'strdup',
			'_stricmp': 'strcasecmp',
			'_strnicmp': 'strncasecmp',
			'_vsnprintf': 'vsnprintf',
			'_snprintf': 'snprintf',
		]);

		cfg.linkerOptions.stripSymbolTable = false;
		cfg.linkerOptions.staticLibStdCpp = false;
		cfg.compilerOptions.args '-Qoption,cpp,--treat_func_as_string_literal_cpp', '-fno-rtti', '-fno-exceptions'
	}

	ToolchainConfigUtils.apply(project, cfg, b);
}

model {
	buildTypes {
		release
	}

	platforms {
		x86 {
			architecture "x86"
		}
	}

	toolChains {
		visualCpp(VisualCpp) {
		}
		icc(Icc) {
		}
	}

	components {
		dedicated(NativeExecutableSpec) {
			targetPlatform 'x86'
			baseName GradleCppUtils.windows ? 'hlds' : 'hlds_linux'

			sources {
				dedicated_main(CppSourceSet) {
					source {
						srcDir "src"
						include "**/*.cpp"
						exclude "precompiled.cpp"
						if (GradleCppUtils.windows) {
							exclude "sys_linux.cpp"
						} else {
							exclude "sys_window.cpp", "conproc.cpp"
						}
					}
					exportedHeaders {
						srcDirs "vgui"
					}
				}
				dedicated_common(CppSourceSet) {
					source {
						srcDir "../common"
						include "ObjectList.cpp"
						include "SteamAppStartUp.cpp"
						include "textconsole.cpp"
						if (GradleCppUtils.windows) {
							include "TextConsoleWin32.cpp"
						}
						else {
							include "TextConsoleUnix.cpp"
						}
					}
				}
				dedicated_engine(CppSourceSet) {
					source {
						srcDir "../engine"
						include "mem.cpp"
					}
				}
				dedicated_pch(CppSourceSet) {
					source {
						srcDir "src"
						include "precompiled.cpp"
					}
				}
				rc {
					source {
						srcDir "msvc"
						include "dedicated.rc"
					}
					exportedHeaders {
						srcDirs "msvc"
					}
				}
			}

			binaries.all {
				NativeExecutableBinarySpec b -> project.setupToolchain(b)
			}
		}
	}
}

task buildFixes {
	dependsOn binaries.withType(NativeExecutableBinarySpec).matching { NativeExecutableBinarySpec blib ->
		blib.buildable && blib.buildType.name == 'release'
	}
}

task buildRelease {
	dependsOn binaries.withType(NativeExecutableBinarySpec).matching { NativeExecutableBinarySpec blib ->
		blib.buildable && blib.buildType.name == 'release'
	}
}
